#
# Do not enforce any of these cops...
#
# Note: cops are ordered alphabetically.
#

require: rubocop-rspec

#
# Checks that tests use 'described_class'.
#
# Note: I can't figure out which is the correct cop so I've included both.
#
RSpec/DescribedClass:
  Enabled: false

RSpec/DescribeClass:
  Enabled: false

#
# Checks that the second argument to 'describe' specifies a method.
#
RSpec/DescribeMethod:
  Enabled: false

#
# Checks for 'subject' definitions that come after 'let' definitions.
#
#   # bad
#   RSpec.describe User do
#     let(:params) { blah }
#     subject { described_class.new(params) }
#
#     it 'is valid' do
#       expect(subject.valid?).to be(true)
#     end
#   end
#
#   # good
#   RSpec.describe User do
#     subject { described_class.new(params) }
#
#     let(:params) { blah }
#
#     it 'is valid' do
#       expect(subject.valid?).to be(true)
#     end
#   end
#
RSpec/LeadingSubject:
  Enabled: false

#
# This cop looks for uses of block comments (=begin...=end).
#
Style/BlockComments:
  Enabled: false

#
# Check for if and case statements where each branch is used for assignment to the same variable when using
# the return of the condition can be used instead.
#
#   # bad
#   if foo
#     bar = 1
#   else
#     bar = 2
#   end
#
#   # good
#   bar = if foo
#     1
#   else
#     2
#   end
#
Style/ConditionalAssignment:
  Enabled: false

#
# This cop checks for missing top-level documentation of classes and modules.
#
Style/Documentation:
  Enabled: false

#
# This cop checks for uses of double negation (!!) to convert something to a boolean value. As this is both
# cryptic and usually redundant, it should be avoided.
#
Style/DoubleNegation:
  Enabled: false

#
# This cop checks for the formatting of empty method definitions. By default it enforces empty method definitions to go
# on a single line (compact style), but it can be configured to enforce the end to go on its own line (expanded style.)
#
# Note: A method definition is not considered empty if it contains comments.
#
Style/EmptyMethod:
  Enabled: false

#
# This cop is designed to help upgrade to Ruby 3.0. It will add the comment `# frozen_string_literal: true` to the top
# of files to enable frozen string literals. Frozen string literals will be default in Ruby 3.0. The comment will be
# added below a shebang and encoding comment. The frozen string literal comment is only valid in Ruby 2.3+.
#
Style/FrozenStringLiteralComment:
  Enabled: false

#
# This cops checks for use of extend self or module_function in a module.
#
Style/ModuleFunction:
  Enabled: false

#
# This cop checks whether some constant value isn't a mutable literal (e.g. array or hash).
#
#   # bad
#   CONST = [1, 2, 3]
#
#   # good
#   CONST = [1, 2, 3].freeze
#
Style/MutableConstant:
  Enabled: false

#
# This cop (by default) checks for uses of methods Hash#has_key? and Hash#has_value? where it enforces Hash#key? and
# Hash#value? It is configurable to enforce the inverse, using verbose method names also.
#
#   EnforcedStyle: short
#
#   # bad
#   Hash#has_key?
#   Hash#has_value?
#
#   # good
#   Hash#key?
#   Hash#value?
#
#   EnforcedStyle: verbose
#
#   # bad
#   Hash#key?
#   Hash#value?
#
#   # good
#   Hash#has_key?
#   Hash#has_value?
#
Style/PreferredHashMethods:
  Enabled: false

#
# This cop checks whether the block parameters of a single-line method accepting a block match the names
# specified via configuration.
#
# For instance one can configure reduce(inject) to use |a, e| as parameters.
#
Style/SingleLineBlockParams:
  Enabled: false

#
# This cop can check for the %w() syntax.
#
Style/WordArray:
  Enabled: false
